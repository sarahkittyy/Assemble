#pragma once

#include <SFML/Graphics.hpp>
#include <filesystem>
#include <string>
#include "ResourceManager.hpp"
#include "nlohmann/json.hpp"

namespace Graphics
{

/**
 * @brief A graphical tilemap, loaded from a json file
 * generated by Tiled
 * 
 */
class Tilemap : public sf::Drawable, public sf::Transformable
{
public:
	/**
	 * @brief Init the tilemap
	 * 
	 * @param resource The app resource manager
	 */
	Tilemap(ResourceManager* resource);

	/**
	 * @brief Init the tilemap.
	 * 
	 * @param resource The app resource manager.
	 * @param file The JSON file generated by Tiled.
	 */
	Tilemap(ResourceManager* resource,
			std::string file);

	/**
	 * @brief Init the map from the given file.
	 * 
	 * @param file The file to load from
	 */
	void loadFromFile(std::string file);

private:
	/// SFML draw() override.
	virtual void draw(sf::RenderTarget& target, sf::RenderStates states) const;

	/// The app resource manager.
	ResourceManager* mResource;

	/// The map vertex array.
	sf::VertexArray mVertices;
	/// The map texture
	sf::Texture* mTexture;
	/// The map properties json.
	nlohmann::json mTileProps;

	/// Vector of integers representing the tiles on the map.
	std::vector<int> mTiles;

	/// The map properties
	struct
	{
		/// The map tile size, in pixels.
		sf::Vector2i tileSize;
		/// The map grid size, in tiles.
		sf::Vector2i gridSize;
		/// The size of the texture, in pixels.
		sf::Vector2i texSize;
		/// The size of the texture tilemap grid, in tiles.
		inline const sf::Vector2i texGridSize() const
		{
			return sf::Vector2i(texSize.x / tileSize.x,
								texSize.y / tileSize.y);
		}
	} mProps;
};

}